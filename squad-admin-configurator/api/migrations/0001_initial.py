# Generated by Django 4.2.4 on 2023-09-01 22:50

import django.db.models.deletion
import utils
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("server_admins", "0001_initial"),
        ("contenttypes", "0002_remove_content_type_name"),
    ]

    operations = [
        migrations.CreateModel(
            name="ServerUrl",
            fields=[
                (
                    "server",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name="server_url",
                        serialize=False,
                        to="server_admins.server",
                        verbose_name="Сервер",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        verbose_name="Активирована ли раздача файла"
                    ),
                ),
                (
                    "url",
                    models.CharField(
                        max_length=100,
                        unique=True,
                        validators=[utils.url_postfix_validator],
                        verbose_name="URL постфикс пути",
                    ),
                ),
            ],
            options={
                "verbose_name": "Доступ к конфигурации игрового сервера",
                "verbose_name_plural": "2. Доступ к конфигурации игрового сервера",
            },
        ),
        migrations.CreateModel(
            name="RoleWebhook",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "description",
                    models.CharField(max_length=300, verbose_name="Описание"),
                ),
                ("is_active", models.BooleanField(verbose_name="Активирован")),
                (
                    "url",
                    models.CharField(
                        max_length=100,
                        unique=True,
                        validators=[utils.url_postfix_validator],
                        verbose_name="URL постфикс пути",
                    ),
                ),
                (
                    "creation_date",
                    models.DateTimeField(
                        auto_now_add=True,
                        verbose_name="Дата добавления вебхука",
                    ),
                ),
                (
                    "hmac_is_active",
                    models.BooleanField(
                        default=False,
                        help_text="Механизм проверки целостности информации, позволяющий гарантировать то, что передаваемые данные не были изменены посторонними лицами. Должен поддерживаться тем, кто будет вызывать вебхук",
                        verbose_name="Активирована ли проверка HMAC подписи",
                    ),
                ),
                (
                    "hmac_hash_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("blake2b", "blake2b"),
                            ("blake2s", "blake2s"),
                            ("md5", "md5"),
                            ("md5-sha1", "md5-sha1"),
                            ("sha1", "sha1"),
                            ("sha224", "sha224"),
                            ("sha256", "sha256"),
                            ("sha384", "sha384"),
                            ("sha3_224", "sha3_224"),
                            ("sha3_256", "sha3_256"),
                            ("sha3_384", "sha3_384"),
                            ("sha3_512", "sha3_512"),
                            ("sha512", "sha512"),
                            ("sha512_224", "sha512_224"),
                            ("sha512_256", "sha512_256"),
                            ("shake_128", "shake_128"),
                            ("shake_256", "shake_256"),
                            ("sm3", "sm3"),
                        ],
                        help_text="Обычно предоставляется тем, кто будет вызывать вебхук, например sha256 для Battlemetrics",
                        max_length=64,
                        verbose_name="Тип хеша в HMAC",
                    ),
                ),
                (
                    "hmac_secret_key",
                    models.CharField(
                        blank=True,
                        help_text="Обычно предоставляется тем, кто будет вызывать вебхук",
                        max_length=1024,
                        verbose_name="Секретный ключ HMAC",
                    ),
                ),
                (
                    "hmac_header",
                    models.CharField(
                        blank=True,
                        help_text="Например X-SIGNATURE для Battlemetrics",
                        max_length=64,
                        verbose_name="Название заголовка который содержит HMAC сигнатуру",
                    ),
                ),
                (
                    "hmac_header_regex",
                    models.CharField(
                        blank=True,
                        help_text="Например .* если весь заголовок - сигнатура, или (?<=s=)\\w+(?=,|\\Z) для Battlemetrics",
                        max_length=256,
                        validators=[utils.regex_validator],
                        verbose_name="Регулярное выражение для получения HMAC сигнатуры из заголовка",
                    ),
                ),
                (
                    "request_sender",
                    models.CharField(
                        blank=True,
                        choices=[("battlemetrics", "Battlemetrics.com")],
                        help_text="Активирует специфичные для каждого сервиса алгоритмы проверки HMAC у запроса",
                        max_length=128,
                        verbose_name="Сервис отправляющий запрос",
                    ),
                ),
                (
                    "unit_of_duration",
                    models.CharField(
                        choices=[
                            ("hours", "Час"),
                            ("days", "День"),
                            ("weeks", "Неделя"),
                        ],
                        help_text="Единица измерения времени, на которое будет выдана роль",
                        max_length=10,
                        verbose_name="Единица измерения продолжительности",
                    ),
                ),
                (
                    "allow_custom_duration_until_end",
                    models.BooleanField(
                        default=False,
                        help_text="Если активно - в запросе можно передать число, время на которое будет выдана роль",
                        verbose_name="Разрешено ли в запросе устанавливать продолжительность полномочий",
                    ),
                ),
                (
                    "duration_until_end",
                    models.IntegerField(
                        verbose_name="Стандартно выдаваемая продолжительность полномочий"
                    ),
                ),
                (
                    "active_and_increase_common_date_of_end",
                    models.BooleanField(
                        default=True,
                        help_text="Если время до общего окончания полномочий меньше времени чем выдаёт вебхук - общее время будет установлено на время выданное вебхуком. Также активирует пользователя если он был деактивирован. Если данный флаг выключен, а у пользователя истекло время - выдача вебхуком ролей фактически не будет срабатывать",
                        verbose_name="Активировать пользователя и увеличивать общее время до окончания полномочий",
                    ),
                ),
                (
                    "roles",
                    models.ManyToManyField(
                        to="server_admins.role",
                        verbose_name="Роли которые будут выданы на серверах",
                    ),
                ),
                (
                    "servers",
                    models.ManyToManyField(
                        to="server_admins.server",
                        verbose_name="Сервера на которых будут выданы роли",
                    ),
                ),
            ],
            options={
                "verbose_name": "Вебхук на добавление роли",
                "verbose_name_plural": "3. Вебхуки на добавление ролей",
            },
        ),
        migrations.CreateModel(
            name="WebhookLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("message", models.TextField(verbose_name="Лог сообщений")),
                (
                    "request_info",
                    models.TextField(
                        blank=True, verbose_name="Сведения о запросе"
                    ),
                ),
                (
                    "webhook_info",
                    models.TextField(verbose_name="Сведения о вебхуке"),
                ),
                (
                    "level",
                    models.CharField(
                        choices=[
                            ("info", "Информация"),
                            ("warning", "Предупреждение"),
                            ("error", "Ошибка"),
                        ],
                        max_length=10,
                        verbose_name="Уровень логирования",
                    ),
                ),
                (
                    "creation_date",
                    models.DateTimeField(
                        auto_now_add=True,
                        verbose_name="Дата создания сообщения",
                    ),
                ),
                (
                    "object_id",
                    models.PositiveIntegerField(verbose_name="ID вебхука"),
                ),
                (
                    "content_type",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="contenttypes.contenttype",
                        verbose_name="Модель вебхука",
                    ),
                ),
            ],
            options={
                "verbose_name": "Лог вебхука",
                "verbose_name_plural": "1. Логи вебхуков",
                "ordering": ("-creation_date",),
                "indexes": [
                    models.Index(
                        fields=["content_type", "object_id"],
                        name="api_webhook_content_834d6e_idx",
                    )
                ],
            },
        ),
    ]
